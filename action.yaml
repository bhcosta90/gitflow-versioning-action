name: Versioning Action
description: GitHub Action for automated semantic versioning
author: Bruno

inputs:
  mode:
    description: 'Execution mode: auto, package'
    required: true
    default: 'auto'

runs:
  using: "composite"
  steps:
    - name: Configure Git
      shell: bash
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Detect base and latest tag
      shell: bash
      run: |
        git fetch --prune --tags
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echo "Current branch: $BRANCH"

        if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
          LAST_STABLE=$(git tag --list '[0-9]*' --sort=-v:refname | head -n 1)
        
          if [[ -z "$LAST_STABLE" ]]; then
            LAST_STABLE="0.0.0" 
            MAJOR=0
          else
            MAJOR=$(echo "$LAST_STABLE" | cut -d. -f1)
            MINOR=$(echo "$LAST_STABLE" | cut -d. -f2)
            PATCH=$(echo "$LAST_STABLE" | cut -d. -f3)
            MINOR=$((MINOR + 1))
            LAST_STABLE="${MAJOR}.${MINOR}.0"
          fi
        
          BASE_VERSION="$LAST_STABLE"
          BRANCH_EXISTS=$(git ls-remote --heads origin "${MAJOR}.x")
        
          if [[ -z "$BRANCH_EXISTS" ]]; then
            echo "Branch ${MAJOR}.x does not exist. Creating it from $BRANCH..."
            git checkout -b "${MAJOR}.x"
            git push origin "${MAJOR}.x"
          else
            echo "Branch ${MAJOR}.x already exists."
          fi

          # Find latest dev tag for this stable version
          LAST_DEV=$(git tag --list "dev-${BASE_VERSION}-*-rc" --sort=-v:refname | head -n 1)
        
          if [[ -n "$LAST_DEV" ]]; then
            SEQ=$(echo "$LAST_DEV" | sed -E 's/dev-[0-9]+\.[0-9]+\.[0-9]+-([0-9]+)-rc/\1/')
            NEXT_SEQ=$((SEQ + 1))
          else
            NEXT_SEQ=0
          fi
        
          NEW_TAG="dev-${BASE_VERSION}-${NEXT_SEQ}-rc"
          echo "Generated new tag: $NEW_TAG"
        
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

        elif [[ "$BRANCH" =~ ^[0-9]+\.x$ ]]; then
          MAJOR=$(echo $BRANCH | cut -d. -f1)
          LAST_TAG=$(git tag --list "${MAJOR}.*" --sort=-v:refname | head -n 1)
          echo "Latest tag for $BRANCH: $LAST_TAG"

          MAJOR=$(echo $LAST_TAG | cut -d. -f1)
          MINOR=$(echo $LAST_TAG | cut -d. -f2)
          PATCH=$(echo $LAST_TAG | cut -d. -f3)
          NEXT_PATCH=$((PATCH + 1))
          NEW_TAG="${MAJOR}.${MINOR}.${NEXT_PATCH}"
          echo "Creating new patch tag: $NEW_TAG"

          bash "${{ github.action_path }}"/scripts/generate_changelog.sh "$NEW_TAG" "$MAJOR.x"

          git tag $NEW_TAG
          git push origin $NEW_TAG
        fi

    - name: "Finalize package (mode: package)"
      if: ${{ inputs.mode == 'package' }}
      shell: bash
      run: |
        git fetch --prune --tags
        LAST_STABLE=$(git tag --list '[0-9]*' --sort=-v:refname | head -n 1)
        
        if [[ -z "$LAST_STABLE" ]]; then
          LAST_STABLE="0.0.0" 
          MAJOR=0
        else
          MAJOR=$(echo "$LAST_STABLE" | cut -d. -f1)
          MINOR=$(echo "$LAST_STABLE" | cut -d. -f2)
          PATCH=$(echo "$LAST_STABLE" | cut -d. -f3)
          MINOR=$((MINOR + 1))
          LAST_STABLE="${MAJOR}.${MINOR}.0"
        fi
        
        BASE_VERSION="$LAST_STABLE"
        BRANCH_EXISTS=$(git ls-remote --heads origin "${MAJOR}.x")
      
        if [[ -z "$BRANCH_EXISTS" ]]; then
          echo "Branch ${MAJOR}.x does not exist. Creating it from $BRANCH..."
          git checkout -b "${MAJOR}.x"
          git push origin "${MAJOR}.x"
        else
          echo "Branch ${MAJOR}.x already exists."
        fi

        # Find latest dev tag for this stable version
        LAST_DEV=$(git tag --list "dev-${BASE_VERSION}-*-rc" --sort=-v:refname | head -n 1)
        if [[ -n "$LAST_DEV" ]]; then
          VERSION=$(echo "$LAST_DEV" | cut -d'-' -f2)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        else
          echo "Nenhuma tag dev encontrada para $BASE_VERSION"
          exit 1
        fi
        
        for TAG in $(git tag --list "dev-${MAJOR}.${MINOR}.*"); do
          if [[ "$TAG" != "$LAST_DEV" ]]; then
            git push --delete origin "$TAG"
            git tag -d "$TAG"
          fi
        done

        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "Creating new stable version: $NEW_VERSION"
        
        bash "${{ github.action_path }}"/scripts/generate_changelog.sh "$NEW_VERSION"

        git tag $NEW_VERSION "$LAST_DEV"
        git push origin $NEW_VERSION
