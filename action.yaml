name: "Gitflow Versioning"
description: "Gerencia versões no estilo Git Flow com incremento automático de tags e atualização do CHANGELOG."
author: "bhcosta90"

inputs:
  mode:
    description: "Modo de execução (dev, dev-branch, release-branch, finalize-package, finalize-release)"
    required: true
  branch:
    description: "Nome da branch base (opcional, usado em dev-branch e release-branch)"
    required: false
  changelog_entry:
    description: "Notas para o CHANGELOG.md (usado no finalize-package)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Executar GitFlow
      shell: bash
      run: |
        set -e
        echo "Modo selecionado: ${{ inputs.mode }}"

        case "${{ inputs.mode }}" in

        dev)
          latest=$(git tag --list "dev-*" --sort=-v:refname | head -n 1)
          if [[ -z "$latest" ]]; then
            version="dev-0.0.0"
          else
            base=${latest#dev-}
            IFS='.' read -r major minor patch <<< "$base"
            patch=$((patch+1))
            version="dev-$major.$minor.$patch"
          fi
          echo "Criando tag: $version"
          git tag $version
          git push origin $version
          ;;

        dev-branch)
          base="${{ inputs.branch }}"
          latest=$(git tag --list "${base}.*" --sort=-v:refname | head -n 1)
          if [[ -z "$latest" ]]; then
            version="${base}.0"
          else
            patch=${latest##*.}
            patch=$((patch+1))
            version="${base}.${patch}"
          fi
          echo "Criando tag: $version"
          git tag $version
          git push origin $version
          ;;

        release-branch)
          base="${{ inputs.branch }}"
          latest=$(git tag --list "${base}.*" --sort=-v:refname | head -n 1)
          if [[ -z "$latest" ]]; then
            version="${base}.0"
          else
            patch=${latest##*.}
            patch=$((patch+1))
            version="${base}.${patch}"
          fi
          echo "Criando tag: $version"
          git tag $version
          git push origin $version
          ;;

        finalize-package)
          # Pegar última release (não dev)
          latest_release=$(git tag --list "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)
          if [[ -z "$latest_release" ]]; then
            version="0.0.0"
          else
            major=$(echo $latest_release | cut -d'.' -f1)
            minor=$(( $(echo $latest_release | cut -d'.' -f2) + 1 ))
            version="$major.$minor.0"
          fi
          echo "Tag final do pacote: $version"

          # Atualizar CHANGELOG.md
          if [[ -n "${{ inputs.changelog_entry }}" ]]; then
            echo "## $version ($(date +'%Y-%m-%d'))" >> CHANGELOG.md
            echo "${{ inputs.changelog_entry }}" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add CHANGELOG.md
            git commit -m "docs: atualizar CHANGELOG.md para $version"
            git push origin HEAD:${GITHUB_REF_NAME}
          fi

          # Criar a tag final
          git tag $version
          git push origin $version

          # Criar branch develop/x.y
          major_minor=$(echo $version | cut -d'.' -f1,2)
          git checkout -b develop/$major_minor
          git push origin develop/$major_minor

          # Apagar todas as dev tags
          for tag in $(git tag --list "dev-*"); do
            git push --delete origin "$tag"
            git tag -d "$tag"
          done
          ;;

        finalize-release)
          # Encontrar última tag final
          latest=$(git tag --list "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)
          if [[ -z "$latest" ]]; then
            echo "Nenhuma tag final encontrada."
            exit 1
          fi

          major_minor=$(echo $latest | cut -d'.' -f1,2)
          release_branch="release/$major_minor"
          echo "Criando branch release: $release_branch"

          git checkout -b $release_branch
          git push origin $release_branch

          # Apagar todas as dev tags
          for tag in $(git tag --list "dev-*"); do
            git push --delete origin "$tag"
            git tag -d "$tag"
          done

          # Apagar todas as branches develop/x.*
          for branch in $(git branch -r | grep "origin/develop/" | sed 's/origin\///'); do
            git push origin --delete "$branch"
          done
          ;;

        *)
          echo "Modo inválido: ${{ inputs.mode }}"
          exit 1
          ;;
        esac
