name: "GitFlow Versioning"
description: "Composite action para versionamento GitFlow"
inputs:
  mode:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: Executar vers√£o
      shell: bash
      run: |
        set -e
        echo "Mode: ${{ inputs.mode }}, Branch: $(git rev-parse --abbrev-ref HEAD)"

        case "${{ inputs.mode }}" in
          dev)
            # Evita criar tag dev-* em commits do bot ou finalize
            LAST_COMMIT_MSG=$(git log -1 --pretty=%B | tr -d '\n')
            LAST_COMMIT_AUTHOR=$(git log -1 --pretty=%an)

            if echo "$LAST_COMMIT_MSG" | grep -Eqi "(finalize-release|finalize-package)"; then
              echo "‚ö†Ô∏è Commit detectado como finalize-release/package. Pulando cria√ß√£o de tag dev-*."
              exit 0
            fi

            if [ "$LAST_COMMIT_AUTHOR" = "github-actions[bot]" ]; then
              echo "‚ö†Ô∏è Commit feito pelo GitHub Actions bot. Pulando cria√ß√£o de tag dev-*."
              exit 0
            fi

            # Pega √∫ltima release
            latest_release=$(git tag --list "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)

            if [[ -z "$latest_release" ]]; then
              # Inicializa√ß√£o do projeto
              version="dev-0.0.0"
              git tag "$version"
              git push origin "$version"
              git checkout -b "release/0x"
              git push origin "release/0x"
              echo "‚úÖ Inicializado projeto com $version e branch release/0x"
              exit 0
            fi

            major=$(echo $latest_release | cut -d'.' -f1)
            minor=$(( $(echo $latest_release | cut -d'.' -f2) + 1 ))
            latest_dev=$(git tag --list "dev-$major.$minor.*" --sort=-v:refname | head -n 1)

            if [[ -z "$latest_dev" ]]; then
              patch=0
            else
              patch=${latest_dev##*.}
              patch=$((patch+1))
            fi

            version="dev-$major.$minor.$patch"
            echo "Pr√≥xima dev tag: $version"
            git tag "$version"
            git push origin "$version"

            develop_branch="develop/${major}x"
            if ! git ls-remote --exit-code --heads origin "$develop_branch" >/dev/null 2>&1; then
              git checkout -b "$develop_branch"
              git push -u origin "$develop_branch"
            fi
            ;;

          finalize-package)
            echo "üì¶ Finalizando pacote..."
            latest_release=$(git tag --list "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)
            major=$(echo $latest_release | cut -d'.' -f1)
            minor=$(echo $latest_release | cut -d'.' -f2)
            patch=$(( $(echo $latest_release | cut -d'.' -f3) + 1 ))
            version="$major.$minor.$patch"

            git tag "$version"
            git push origin "$version"

            git tag -f latest
            git push origin -f latest

            # Remove tags dev dessa major/minor
            git tag --list "dev-$major.$minor.*" | xargs -r git tag -d
            git push origin --delete $(git tag --list "dev-$major.$minor.*") || true

            # Remove develop/{major}x
            dev_branch="develop/${major}x"
            if git ls-remote --exit-code --heads origin "$dev_branch" >/dev/null 2>&1; then
              git push origin --delete "$dev_branch" || true
            fi
            ;;

          finalize-release)
            echo "üöÄ Finalizando release..."
            latest_release=$(git tag --list "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)
            major=$(echo $latest_release | cut -d'.' -f1)
            minor=$(( $(echo $latest_release | cut -d'.' -f2) + 1 ))
            version="$major.$minor.0"

            git tag "$version"
            git push origin "$version"

            git tag -f latest
            git push origin -f latest

            # Remove tags dev dessa major
            git tag --list "dev-$major.*" | xargs -r git tag -d
            git push origin --delete $(git tag --list "dev-$major.*") || true

            # Remove develop/{major}x
            dev_branch="develop/${major}x"
            if git ls-remote --exit-code --heads origin "$dev_branch" >/dev/null 2>&1; then
              git push origin --delete "$dev_branch" || true
            fi
            ;;

          *)
            echo "‚ùå Modo inv√°lido: ${{ inputs.mode }}"
            exit 1
            ;;
        esac
