name: "Gitflow Versioning"
description: "Automates GitFlow: dev tags, release tags, patch increments, and CHANGELOG.md generation."
author: "bhcosta90"

inputs:
  mode:
    description: "Execution mode (dev, develop-patch, release-patch, finalize-package, finalize-release)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Ruby (for changelog)
      if: ${{ inputs.mode == 'finalize-package' || inputs.mode == 'finalize-release' }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'

    - name: Run GitFlow Logic
      shell: bash
      run: |
        set -e
        MODE="${{ inputs.mode }}"
        REF="${GITHUB_REF#refs/heads/}"
        USER="${GITHUB_REPOSITORY_OWNER}"
        PROJECT="$(basename $GITHUB_REPOSITORY)"

        # Auto-detect mode if not set
        if [[ -z "$MODE" ]]; then
          if [[ "$REF" == "main" ]]; then MODE="dev"; fi
          if [[ "$REF" == develop/* ]]; then MODE="develop-patch"; fi
          if [[ "$REF" == release/* ]]; then MODE="release-patch"; fi
        fi

        echo "Mode: $MODE, Branch: $REF"

        function create_dev_tag() {
          # Pega última estável
          latest_stable=$(git tag --list --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)

          if [[ -z "$latest_stable" ]]; then
            major=0
            minor=1
            patch=0
          else
            IFS='.' read -r major minor patch <<<"$latest_stable"
            minor=$((minor+1))
            patch=0
          fi

          base_dev_prefix="dev-$major.$minor"
          latest_dev=$(git tag --list "${base_dev_prefix}.*" --sort=-v:refname | head -n1)

          if [[ -n "$latest_dev" ]]; then
            IFS='.' read -r _ _ dev_patch <<<"${latest_dev#dev-}"
            patch=$((dev_patch+1))
          fi

          echo "$base_dev_prefix.$patch"
        }

        case "$MODE" in
          dev)
            new_tag=$(create_dev_tag)
            git tag "$new_tag"
            git push origin "$new_tag"
            ;;
          develop-patch|release-patch)
            latest_tag=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
            IFS='.' read -r major minor patch <<<"$latest_tag"
            patch=$((patch+1))
            new_tag="$major.$minor.$patch"
            git tag "$new_tag"
            git push origin "$new_tag"
            ;;
          finalize-package)
            new_tag="0.0.0"
            git tag "$new_tag"
            git push origin "$new_tag"
            develop_branch="develop/0x"
            git checkout -B "$develop_branch"
            git push -u origin "$develop_branch"
            git tag -l "dev-*" | xargs -r git tag -d
            git push origin --delete $(git tag -l "dev-*") || true
            ;;
          finalize-release)
            latest_tag=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
            major=$(( ${latest_tag%%.*} + 1 ))
            new_tag="$major.0.0"
            git tag "$new_tag"
            git push origin "$new_tag"
            release_branch="release/0x"
            git checkout -B "$release_branch"
            git push -u origin "$release_branch"
            develop_branch="develop/0x"
            git checkout -B "$develop_branch"
            git push -u origin "$develop_branch"
            git tag -l "dev-*" | xargs -r git tag -d
            git push origin --delete $(git tag -l "dev-*") || true
            git branch -r | grep "origin/develop/" | grep -v "$develop_branch" | sed 's/origin\///' | xargs -r -n1 git push origin --delete
            ;;
          *)
            echo "Invalid mode: $MODE"
            exit 1
            ;;
        esac
