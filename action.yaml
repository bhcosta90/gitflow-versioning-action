name: "Gitflow Versioning"
description: "Automates GitFlow: dev tags, release tags, patch increments, and branch management."
author: "bhcosta90"

inputs:
  mode:
    description: "Execution mode (dev, develop-patch, release-patch, finalize-package, finalize-release)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitFlow Logic
      shell: bash
      run: |
        MODE="${{ inputs.mode }}"
        REF="${GITHUB_REF#refs/heads/}"

        # Auto-detect mode if not set
        if [[ -z "$MODE" ]]; then
          if [[ "$REF" == "main" ]]; then MODE="dev"; fi
          if [[ "$REF" == develop/* ]]; then MODE="develop-patch"; fi
          if [[ "$REF" == release/* ]]; then MODE="release-patch"; fi
        fi

        echo "Mode: $MODE, Branch: $REF"

        function create_dev_tag() {
          latest_stable=$(git tag --list --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          if [[ -z "$latest_stable" ]]; then
            major=0
            minor=1
            patch=0
          else
            IFS='.' read -r major minor patch <<<"$latest_stable"
            minor=$((minor+1))
            patch=0
          fi

          base_dev_prefix="dev-$major.$minor"
          latest_dev=$(git tag --list "${base_dev_prefix}.*" --sort=-v:refname | head -n1)
          if [[ -n "$latest_dev" ]]; then
            IFS='.' read -r _ _ dev_patch <<<"${latest_dev#dev-}"
            patch=$((dev_patch+1))
          fi
          echo "$base_dev_prefix.$patch"
        }

        function create_patch_tag() {
          latest_tag=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          IFS='.' read -r major minor patch <<<"$latest_tag"
          patch=$((patch+1))
          echo "$major.$minor.$patch"
        }

        function delete_dev_tags_branches() {
          # Deleta tags dev-* remoto e local
          dev_tags=$(git tag -l "dev-*")
          if [[ -n "$dev_tags" ]]; then
            echo "$dev_tags" | xargs -r git tag -d
            echo "$dev_tags" | xargs -r -I {} git push origin :refs/tags/{} || true
          fi

          # Deleta branches develop/* relacionadas à major atual
          major_branch=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 | cut -d. -f1)
          develop_branches=$(git branch -r | grep "origin/develop/" | grep "${major_branch}x" | sed 's#origin/##')
          if [[ -n "$develop_branches" ]]; then
            echo "$develop_branches" | xargs -r git push origin --delete || true
            echo "$develop_branches" | xargs -r git branch -D || true
          fi
        }

        case "$MODE" in
          dev)
            develop_branch="develop/0x"
            if ! git ls-remote --exit-code --heads origin "$develop_branch"; then
              git checkout -b "$develop_branch"
              git push -u origin "$develop_branch" || true
            fi

            new_tag=$(create_dev_tag)
            git tag "$new_tag" || true
            git push origin "$new_tag" || true
            ;;
          develop-patch|release-patch)
            new_tag=$(create_patch_tag)
            git tag "$new_tag" || true
            git push origin "$new_tag" || true
            ;;
          finalize-package)
            # Próxima tag estável
            latest_stable=$(git tag --list --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
            if [[ -z "$latest_stable" ]]; then
              new_tag="0.0.0"
            else
              IFS='.' read -r major minor patch <<<"$latest_stable"
              minor=$((minor+1))
              patch=0
              new_tag="$major.$minor.$patch"
            fi

            git tag "$new_tag" || true
            git push origin "$new_tag" || true

            develop_branch="develop/0x"
            if ! git ls-remote --exit-code --heads origin "$develop_branch"; then
              git checkout -b "$develop_branch"
              git push -u origin "$develop_branch" || true
            fi

            delete_dev_tags_branches
            ;;
          finalize-release)
            latest_tag=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
            if [[ -z "$latest_tag" ]]; then
              new_tag="1.0.0"
            else
              major=$(( ${latest_tag%%.*} + 1 ))
              new_tag="$major.0.0"
            fi

            git tag "$new_tag" || true
            git push origin "$new_tag" || true

            release_branch="release/0x"
            git checkout -B "$release_branch"
            git push -u origin "$release_branch" || true

            develop_branch="develop/0x"
            git checkout -B "$develop_branch"
            git push -u origin "$develop_branch" || true

            delete_dev_tags_branches
            ;;
          *)
            echo "Invalid mode: $MODE"
            exit 1
            ;;
        esac
