name: Versioning Action
description: GitHub Action para versionamento semântico automatizado
author: Bruno

inputs:
  mode:
    description: 'Modo de execução: auto ou release'
    required: true
    default: 'auto'

runs:
  using: "composite"
  steps:
    - name: Configurar Git
      shell: bash
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Detect white and last tag
      shell: bash
      run: |
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echo "Branch atual: $BRANCH"

        if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
          LAST_TAG=$(git tag --list '[0-9]*' --sort=-v:refname | head -n 1)
        
          echo "Checking if Branch 0.x exists..."
          BRANCH_EXISTS=$(git ls-remote --heads origin 1.x)
        
          if [[ -z "$LAST_TAG" ]]; then
            echo "No stable tags found. Creating dev-0.0.0-0-rc..."
            git tag dev-0.0.0-0-rc
            git push origin dev-0.0.0-0-rc
            exit 0
          fi
        
          echo "Última tag estável: $LAST_TAG"

          MAJOR=$(echo $LAST_TAG | cut -d. -f1)
          MINOR=$(echo $LAST_TAG | cut -d. -f2)
          PATCH=$(echo $LAST_TAG | cut -d. -f3)

          NEXT_MINOR=$((MINOR + 1))
          DEV_TAG="dev-${MAJOR}.${NEXT_MINOR}.0-$(date +%s)-rc"
          echo "Criando tag de desenvolvimento: $DEV_TAG"

          git tag $DEV_TAG
          git push origin $DEV_TAG

        elif [[ "$BRANCH" =~ ^[0-9]+\.x$ ]]; then
          MAJOR=$(echo $BRANCH | cut -d. -f1)
          LAST_TAG=$(git tag --list "${MAJOR}.*" --sort=-v:refname | head -n 1)
          echo "Última tag da $BRANCH: $LAST_TAG"

          PATCH=$(echo $LAST_TAG | cut -d. -f3)
          NEXT_PATCH=$((PATCH + 1))
          NEW_TAG="${MAJOR}.${MINOR}.${NEXT_PATCH}"
          echo "Criando nova tag de patch: $NEW_TAG"

          git tag $NEW_TAG
          git push origin $NEW_TAG
        fi

    - name: Finalizar pacote (modo release)
      if: ${{ inputs.mode == 'release' }}
      shell: bash
      run: |
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        MAJOR=$(echo $BRANCH | cut -d. -f1)
        MINOR=$(git tag --list "dev-${MAJOR}.*" | tail -n 1 | cut -d. -f2)

        echo "Limpando tags dev-${MAJOR}.${MINOR}.* exceto a última"
        LAST_DEV=$(git tag --list "dev-${MAJOR}.${MINOR}.*" --sort=-v:refname | tail -n 1)

        for TAG in $(git tag --list "dev-${MAJOR}.${MINOR}.*"); do
          if [[ "$TAG" != "$LAST_DEV" ]]; then
            git tag -d $TAG
            git push origin :refs/tags/$TAG
          fi
        done

        FINAL_TAG="${MAJOR}.${MINOR}.0"
        echo "Criando tag final: $FINAL_TAG"
        git tag $FINAL_TAG $LAST_DEV
        git push origin $FINAL_TAG
